/**
 * Figma Token Sync Script
 * 
 * This script would be run by your CI/CD pipeline (GitHub Actions, Vercel, etc.)
 * to automatically sync design tokens from Figma to your codebase.
 * 
 * Workflow:
 * 1. Figma Design Tokens ‚Üí Figma API
 * 2. CI/CD fetches tokens via Figma API
 * 3. Transforms tokens to CSS custom properties
 * 4. Updates /src/styles/tokens.css
 * 5. Commits changes and triggers Vercel rebuild
 */

const FIGMA_FILE_ID = process.env.FIGMA_FILE_ID;
const FIGMA_ACCESS_TOKEN = process.env.FIGMA_ACCESS_TOKEN;

/**
 * Example token structure from Figma API
 */
const exampleFigmaTokens = {
  "color": {
    "brand": {
      "primary": {
        "value": "#111827",
        "type": "color",
        "description": "Primary brand color - very dark blue"
      },
      "accent": {
        "value": "#2563EB",
        "type": "color"
      }
    },
    "neutral": {
      "50": { "value": "#F8FAFC", "type": "color" },
      "100": { "value": "#F1F5F9", "type": "color" },
      "900": { "value": "#0F172A", "type": "color" }
    }
  },
  "spacing": {
    "1": { "value": "4px", "type": "dimension" },
    "2": { "value": "8px", "type": "dimension" },
    "3": { "value": "12px", "type": "dimension" }
  },
  "radius": {
    "sm": { "value": "2px", "type": "dimension" },
    "md": { "value": "3px", "type": "dimension" },
    "lg": { "value": "4px", "type": "dimension" }
  },
  "typography": {
    "fontFamily": {
      "body": { "value": "Inter", "type": "fontFamily" }
    },
    "fontSize": {
      "xs": { "value": "12px", "type": "dimension" },
      "sm": { "value": "14px", "type": "dimension" },
      "base": { "value": "16px", "type": "dimension" }
    }
  }
};

/**
 * Transform Figma tokens to CSS custom properties
 */
function transformTokensToCSS(tokens) {
  let css = `/**
 * AUTO-GENERATED FROM FIGMA
 * Do not edit this file manually
 * Last updated: ${new Date().toISOString()}
 */

:root {
  /* Base Color Tokens */\n`;

  // Transform color tokens
  if (tokens.color) {
    Object.entries(tokens.color).forEach(([category, colors]) => {
      Object.entries(colors).forEach(([name, token]) => {
        css += `  --color-${category}-${name}: ${token.value};\n`;
      });
    });
  }

  css += `\n  /* Base Spacing Tokens */\n`;
  
  // Transform spacing tokens
  if (tokens.spacing) {
    Object.entries(tokens.spacing).forEach(([name, token]) => {
      css += `  --space-${name}: ${token.value};\n`;
    });
  }

  css += `\n  /* Base Radius Tokens */\n`;
  
  // Transform radius tokens
  if (tokens.radius) {
    Object.entries(tokens.radius).forEach(([name, token]) => {
      css += `  --radius-${name}: ${token.value};\n`;
    });
  }

  css += `\n  /* Base Typography Tokens */\n`;
  
  // Transform typography tokens
  if (tokens.typography?.fontSize) {
    Object.entries(tokens.typography.fontSize).forEach(([name, token]) => {
      css += `  --font-size-${name}: ${token.value};\n`;
    });
  }

  css += `}\n`;
  
  return css;
}

/**
 * Fetch tokens from Figma API
 */
async function fetchFigmaTokens() {
  try {
    const response = await fetch(`https://api.figma.com/v1/files/${FIGMA_FILE_ID}`, {
      headers: {
        'X-Figma-Token': FIGMA_ACCESS_TOKEN
      }
    });
    
    const data = await response.json();
    
    // Extract design tokens from Figma file
    // This would need to be customized based on how you structure tokens in Figma
    return extractTokensFromFigmaData(data);
  } catch (error) {
    console.error('Failed to fetch Figma tokens:', error);
    throw error;
  }
}

/**
 * Extract design tokens from Figma API response
 * This function would need to be customized based on your Figma structure
 */
function extractTokensFromFigmaData(figmaData) {
  // Implementation depends on how you organize tokens in Figma
  // Could be:
  // - Figma Variables API
  // - Special token frames/components
  // - Styles API
  
  return exampleFigmaTokens; // Placeholder
}

/**
 * Main sync function
 */
async function syncTokens() {
  try {
    console.log('üé® Syncing design tokens from Figma...');
    
    const tokens = await fetchFigmaTokens();
    const css = transformTokensToCSS(tokens);
    
    // Write to tokens.css file
    const fs = require('fs');
    const path = require('path');
    
    const tokensPath = path.join(__dirname, 'tokens.css');
    fs.writeFileSync(tokensPath, css);
    
    console.log('‚úÖ Tokens synced successfully!');
    console.log(`üìù Updated: ${tokensPath}`);
    
  } catch (error) {
    console.error('‚ùå Token sync failed:', error);
    process.exit(1);
  }
}

// Export for use in CI/CD
module.exports = {
  syncTokens,
  transformTokensToCSS,
  fetchFigmaTokens
};

// Run if called directly
if (require.main === module) {
  syncTokens();
}